# generated by datamodel-codegen:
#   filename:  task_and_steps.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    model_config = ConfigDict(
        from_attributes=True,
    )
    root: Any


class CeleryResponse(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    error: str = Field("", description="Error message, if any")
    warning: str = Field("", description="Warning message, if any")
    value: Optional[Any] = Field(
        None, description="The response value from the task, can be of any type"
    )


class StepStatus(str, Enum):
    """
    Enumeration of possible statuses for a step in a process.
    """

    UNKNOWN = "UNKNOWN"
    SUCCESS = "SUCCESS"
    FAILED = "FAILED"
    PROCESSING = "PROCESSING"


class StepsList(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    name: str = Field(..., description="The name of the list of steps.")
    status: StepStatus = Field(
        ...,
        description="The current status of the steps list as defined by the StepStatus enum.",
    )
    created_at: AwareDatetime = Field(
        ...,
        description="The time at which the last update was made to the status of the steps list.",
    )


class JobStatus(str, Enum):
    CREATED = "CREATED"
    RUNNING = "RUNNING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"


class JobProgress(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    id: UUID
    progress: int
    status: JobStatus
    start_at: AwareDatetime
    end_at: AwareDatetime
